const $945d8fe7644f77c5$export$c2f15f629432a51d = [
    "ctrl",
    "alt",
    "meta",
    "shift"
];
const $945d8fe7644f77c5$export$a2af00130072d5c1 = "__0_1_2_3_4_5_6_7_8_9_a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_ _`_'_\"_~_!_@_#_$_%_^_&_*_(_)_._-_+_=_[_]_{_}_<_>_,_/_?_;_:_\\_|_capslock_numlock_enter_tab_arrowdown_arrowleft_arrowright_arrowup_end_home_pagedown_pageup_backspace_delete_insert_escape_f1_f2_f3_f4_f5_f6_f7_f8_f9_f10_f11_f12_f13_f14_f15_f16_f17_f18_f19_f20_f21_f22_f23".split("_");
$945d8fe7644f77c5$export$a2af00130072d5c1[1] = "_";
const $945d8fe7644f77c5$export$e45cb6485273080e = {};
for (const [i, c] of $945d8fe7644f77c5$export$a2af00130072d5c1.entries())$945d8fe7644f77c5$export$e45cb6485273080e[c] = i;
const $945d8fe7644f77c5$export$9af93bb9e9126a2 = {
    space: " ",
    plus: "+",
    up: "arrowup",
    down: "arrowdown",
    left: "arrowleft",
    right: "arrowright",
    esc: "escape"
};
const $945d8fe7644f77c5$export$ec514b5495dfb13a = 4;
const $945d8fe7644f77c5$export$2f4b53374d74dab0 = 9;
const $945d8fe7644f77c5$export$fa74f81f6fd55da8 = 8;
const $945d8fe7644f77c5$export$440ece60bb656d1c = 4;
const $945d8fe7644f77c5$export$e81f1a492ca706db = 2;
const $945d8fe7644f77c5$export$e16f40decae6aceb = 1;
const $945d8fe7644f77c5$export$8c6d6ddef5b40636 = $945d8fe7644f77c5$export$2f4b53374d74dab0 + $945d8fe7644f77c5$export$ec514b5495dfb13a;
const $945d8fe7644f77c5$export$c621bb932db11c84 = 2 ** $945d8fe7644f77c5$export$ec514b5495dfb13a;
const $945d8fe7644f77c5$export$df1afef858d2d2a1 = 2 ** $945d8fe7644f77c5$export$8c6d6ddef5b40636;
const $945d8fe7644f77c5$export$4e5c8f1854de11bd = 2 ** (2 * $945d8fe7644f77c5$export$8c6d6ddef5b40636);
const $945d8fe7644f77c5$export$5a85c95189ba5484 = 2 ** (3 * $945d8fe7644f77c5$export$8c6d6ddef5b40636);


function $d1a4178f437f25ce$export$e0c709538cb8ae18(key) {
    let parts;
    if (key === "+") return [
        "+"
    ];
    if ("+" == key.slice(-1)) {
        parts = key.slice(0, -2).split("+");
        parts.push("+");
    } else parts = key.split("+");
    return parts.map((x)=>(0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[x] || x);
}
function $d1a4178f437f25ce$export$a0511d6cbab6225d(key) {
    const parts = new Set(key);
    let code = (0, $945d8fe7644f77c5$export$e45cb6485273080e)[key[key.length - 1].toLowerCase()] || 0;
    for (const modifier of (0, $945d8fe7644f77c5$export$c2f15f629432a51d))code = 2 * code + (parts.has(modifier) ? 1 : 0);
    return code;
}
function $d1a4178f437f25ce$export$b983cdf2c2084305(encodedKey) {
    const charCode = $d1a4178f437f25ce$export$d95305c1c4c40d1d(encodedKey);
    const modifiersCode = $d1a4178f437f25ce$export$a10907c21fef597b(encodedKey);
    const key = [];
    if (modifiersCode & (0, $945d8fe7644f77c5$export$fa74f81f6fd55da8)) key.push("ctrl");
    if (modifiersCode & (0, $945d8fe7644f77c5$export$440ece60bb656d1c)) key.push("alt");
    if (modifiersCode & (0, $945d8fe7644f77c5$export$e81f1a492ca706db)) key.push("meta");
    if (modifiersCode & (0, $945d8fe7644f77c5$export$e16f40decae6aceb)) key.push("shift");
    const c = (0, $945d8fe7644f77c5$export$a2af00130072d5c1)[charCode];
    if (c) key.push(c);
    return key;
}
function $d1a4178f437f25ce$export$d95305c1c4c40d1d(encodedKey) {
    return encodedKey >> (0, $945d8fe7644f77c5$export$ec514b5495dfb13a);
}
function $d1a4178f437f25ce$export$a10907c21fef597b(encodedKey) {
    return encodedKey % (0, $945d8fe7644f77c5$export$c621bb932db11c84);
}
function $d1a4178f437f25ce$export$f7511445e7083e2c(previousKey, newKey) {
    if (previousKey === undefined) return false;
    if ($d1a4178f437f25ce$export$d95305c1c4c40d1d(previousKey) > 0) return false;
    const previousModifiers = $d1a4178f437f25ce$export$a10907c21fef597b(previousKey);
    const newModifiers = $d1a4178f437f25ce$export$a10907c21fef597b(newKey);
    if (previousModifiers === newModifiers && $d1a4178f437f25ce$export$d95305c1c4c40d1d(newKey) === 0) return false;
    return (previousModifiers & $d1a4178f437f25ce$export$a10907c21fef597b(newKey)) === previousModifiers;
}



function $e37d79d2c9101d6e$export$c30017717ce2168e(key, type = "keydown") {
    const parts = (0, $d1a4178f437f25ce$export$e0c709538cb8ae18)(key);
    let eventKey = parts.at(-1);
    if ((0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[eventKey] !== undefined) eventKey = (0, $945d8fe7644f77c5$export$9af93bb9e9126a2)[eventKey];
    if (eventKey === "ctrl") eventKey = "Control";
    if (eventKey === "alt") eventKey = "Alt";
    if (eventKey === "meta") eventKey = "Meta";
    if (eventKey === "shift") eventKey = "Shift";
    return new KeyboardEvent(type, {
        ctrlKey: parts.includes("ctrl"),
        altKey: parts.includes("alt"),
        metaKey: parts.includes("meta"),
        shiftKey: parts.includes("shift"),
        key: eventKey
    });
}
function $e37d79d2c9101d6e$export$81dbaac8d5335cb6(event) {
    let code = (0, $945d8fe7644f77c5$export$e45cb6485273080e)[event.key.toLowerCase()] || 0;
    for (const modifier of (0, $945d8fe7644f77c5$export$c2f15f629432a51d))code = 2 * code + (event[`${modifier}Key`] ? 1 : 0);
    return code;
}





function $06051cacf3d04ec1$export$b109b10146e8f9ba(sequence) {
    return sequence.map((0, $d1a4178f437f25ce$export$e0c709538cb8ae18));
}
function $06051cacf3d04ec1$export$4cb205243eb10110(sequence) {
    if (sequence.length > 4) throw `Can't encode sequence of more than 4 keys!`;
    let code = 0;
    for (const key of sequence)code = code * (0, $945d8fe7644f77c5$export$df1afef858d2d2a1) + (0, $d1a4178f437f25ce$export$a0511d6cbab6225d)(key);
    return code;
}
function $06051cacf3d04ec1$export$52460a43741a23b4(sequence) {
    const keys = [];
    while(sequence > 0){
        keys.unshift((0, $d1a4178f437f25ce$export$b983cdf2c2084305)(sequence % 8192));
        sequence = sequence >> 13;
    }
    return keys;
}
function $06051cacf3d04ec1$export$6199ce3afbf6d7f6(seq) {
    if (seq < (0, $945d8fe7644f77c5$export$df1afef858d2d2a1)) return 1;
    if (seq < (0, $945d8fe7644f77c5$export$4e5c8f1854de11bd)) return 2;
    if (seq < (0, $945d8fe7644f77c5$export$5a85c95189ba5484)) return 3;
    return 4;
}
function $06051cacf3d04ec1$export$8cb364356ea2d022(keys) {
    const result = [];
    let sequenceCode = 0;
    let multiplier = 0;
    for(let i = keys.length - 1; i >= 0; i--){
        sequenceCode = 2 ** multiplier * keys[i] + sequenceCode;
        multiplier = multiplier + 13;
        result.push(sequenceCode);
    }
    return result;
}


function $11b591822c30f2b7$export$e6a0daad8304de(data = {}) {
    return {
        history: [],
        historySize: 0,
        bindings: new Map(),
        disabledSequenceCodes: new Set(),
        ...data
    };
}
function $11b591822c30f2b7$export$2666eec10feb506f(state, sequence, fn) {
    const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));
    if (!state.bindings.has(sequenceCode)) state.bindings.set(sequenceCode, new Set());
    state.bindings.get(sequenceCode).add(fn);
    return $11b591822c30f2b7$export$3b88b12a1b2479e8(state);
}
function $11b591822c30f2b7$export$164d2c5f74d5827c(state, sequence, fn) {
    const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));
    const fns = state.bindings.get(sequenceCode);
    if (fns) {
        fns.delete(fn);
        if (fns.size == 0) state.bindings.delete(sequenceCode);
    }
    return $11b591822c30f2b7$export$3b88b12a1b2479e8(state);
}
function $11b591822c30f2b7$export$445cc5a591c8a8a2(state, sequence) {
    const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));
    state.disabledSequenceCodes.delete(sequenceCode);
    return state;
}
function $11b591822c30f2b7$export$21b222afdafd214b(state, sequence) {
    const sequenceCode = (0, $06051cacf3d04ec1$export$4cb205243eb10110)((0, $06051cacf3d04ec1$export$b109b10146e8f9ba)(sequence));
    state.disabledSequenceCodes.add(sequenceCode);
    return state;
}
function $11b591822c30f2b7$export$1191ff934e9b979c(state, event) {
    const key = (0, $e37d79d2c9101d6e$export$81dbaac8d5335cb6)(event);
    const previousKey = state.history.at(-1);
    if ((0, $d1a4178f437f25ce$export$f7511445e7083e2c)(previousKey, key)) state.history.pop();
    state.history.push(key);
    if (state.history.length > state.historySize) state.history.shift();
    return state;
}
function $11b591822c30f2b7$export$a84ac9f6f555b44a(state) {
    const callbacks = [];
    for (const sequenceCode of (0, $06051cacf3d04ec1$export$8cb364356ea2d022)(state.history)){
        if (state.disabledSequenceCodes.has(sequenceCode)) continue;
        callbacks.push(...state.bindings.get(sequenceCode) || []);
    }
    return callbacks;
}
function $11b591822c30f2b7$export$d6e5ca10785815df(state, event) {
    state = $11b591822c30f2b7$export$1191ff934e9b979c(state, event);
    const fns = $11b591822c30f2b7$export$a84ac9f6f555b44a(state);
    for (const fn of fns)fn(event);
    return [
        state,
        fns
    ];
}
function $11b591822c30f2b7$export$3b88b12a1b2479e8(state) {
    state.historySize = 0;
    for (const code of state.bindings.keys())state.historySize = Math.max(state.historySize, (0, $06051cacf3d04ec1$export$6199ce3afbf6d7f6)(code));
    return state;
}


class $3692663818ad2bcc$export$a428cd33b25d5283 {
    add(...args) {
        const keys = args.slice(0, -1);
        const fn = args.at(-1);
        this.state = (0, $11b591822c30f2b7$export$2666eec10feb506f)(this.state, keys, fn);
        return this;
    }
    remove(...args) {
        const keys = args.slice(0, -1);
        const fn = args.at(-1);
        this.state = (0, $11b591822c30f2b7$export$164d2c5f74d5827c)(this.state, keys, fn);
        return this;
    }
    enable(...keys) {
        this.state = (0, $11b591822c30f2b7$export$445cc5a591c8a8a2)(this.state, keys);
        return this;
    }
    disable(...keys) {
        this.state = (0, $11b591822c30f2b7$export$21b222afdafd214b)(this.state, keys);
        return this;
    }
    handle(event) {
        const [state, fns] = (0, $11b591822c30f2b7$export$d6e5ca10785815df)(this.state, event);
        this.state = state;
        return fns.length > 0;
    }
    constructor(state){
        this.state = state;
        this.add = this.add.bind(this);
        this.remove = this.remove.bind(this);
        this.handle = this.handle.bind(this);
    }
}



var $b289af7168eb38ef$exports = {};


function $3d193bcdb4e39103$export$2e2bcd8739ae039() {
    return new (0, $3692663818ad2bcc$export$a428cd33b25d5283)((0, $11b591822c30f2b7$export$e6a0daad8304de)());
}


export {$3d193bcdb4e39103$export$2e2bcd8739ae039 as default};
//# sourceMappingURL=index.mjs.map
