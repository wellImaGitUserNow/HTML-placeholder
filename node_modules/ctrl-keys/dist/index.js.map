{"mappings":"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","sources":["src/index.ts","src/Handler.ts","src/state.ts","src/event.ts","src/key.ts","src/constants.ts","src/sequence.ts","src/types.ts"],"sourcesContent":["import {Handler} from './Handler'\nimport {createState} from './state'\n\nexport * from './types'\n\nexport default function createHandler() {\n  return new Handler(createState())\n}\n","import {Callback, HandlerInterface, State, Binding, Sequence} from './types'\nimport {addBinding, disableSequence, enableSequence, handleEvent, removeBinding} from './state'\n\nexport class Handler implements HandlerInterface {\n  constructor(protected state: State) {\n    this.add = this.add.bind(this)\n    this.remove = this.remove.bind(this)\n    this.handle = this.handle.bind(this)\n  }\n\n  add(...args: Binding): this {\n    const keys = args.slice(0, -1) as Sequence\n    const fn = args.at(-1) as Callback\n    this.state = addBinding(this.state, keys, fn)\n    return this\n  }\n\n  remove(...args: Binding): this {\n    const keys = args.slice(0, -1) as Sequence\n    const fn = args.at(-1) as Callback\n    this.state = removeBinding(this.state, keys, fn)\n    return this\n  }\n\n  enable(...keys: Sequence): this {\n    this.state = enableSequence(this.state, keys)\n    return this\n  }\n\n  disable(...keys: Sequence): this {\n    this.state = disableSequence(this.state, keys)\n    return this\n  }\n\n  handle(event: KeyboardEvent) {\n    const [state, fns] = handleEvent(this.state, event)\n    this.state = state\n    return fns.length > 0\n  }\n}\n","import {encodeEvent} from './event'\nimport {shouldOverride} from './key'\nimport {Callback, State, Sequence} from './types'\nimport {encodeSequence, getEncodedSequencesFromHistory, getSequenceSize, normalizeSequence} from './sequence'\n\nexport function createState(data: Partial<State> = {}): State {\n  return {\n    history: [],\n    historySize: 0,\n    bindings: new Map(),\n    disabledSequenceCodes: new Set(),\n    ...data,\n  }\n}\n\nexport function addBinding(state: State, sequence: Sequence, fn: Callback): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  if (!state.bindings.has(sequenceCode)) {\n    state.bindings.set(sequenceCode, new Set())\n  }\n  state.bindings.get(sequenceCode)!.add(fn)\n  return updateHistorySize(state)\n}\n\nexport function removeBinding(state: State, sequence: Sequence, fn: Callback): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  const fns = state.bindings.get(sequenceCode)\n  if (fns) {\n    fns.delete(fn)\n    if (fns.size == 0) {\n      state.bindings.delete(sequenceCode)\n    }\n  }\n  return updateHistorySize(state)\n}\n\nexport function enableSequence(state: State, sequence: Sequence): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  state.disabledSequenceCodes.delete(sequenceCode)\n  return state\n}\n\nexport function disableSequence(state: State, sequence: Sequence): State {\n  const sequenceCode = encodeSequence(normalizeSequence(sequence))\n  state.disabledSequenceCodes.add(sequenceCode)\n  return state\n}\n\nexport function addEventToHistory(state: State, event: KeyboardEvent): State {\n  const key = encodeEvent(event)\n  const previousKey = state.history.at(-1)\n  if (shouldOverride(previousKey, key)) {\n    state.history.pop()\n  }\n  state.history.push(key)\n  if (state.history.length > state.historySize) {\n    state.history.shift()\n  }\n  return state\n}\n\nexport function getMatchingCallbacks(state: State): Callback[] {\n  const callbacks = []\n  for (const sequenceCode of getEncodedSequencesFromHistory(state.history)) {\n    if (state.disabledSequenceCodes.has(sequenceCode)) {\n      continue\n    }\n    callbacks.push(...(state.bindings.get(sequenceCode) || []))\n  }\n  return callbacks\n}\n\nexport function handleEvent(state: State, event: KeyboardEvent): [State, Callback[]] {\n  state = addEventToHistory(state, event)\n  const fns = getMatchingCallbacks(state)\n  for (const fn of fns) fn(event)\n  return [state, fns]\n}\n\nexport function updateHistorySize(state: State): State {\n  state.historySize = 0\n  for (const code of state.bindings.keys()) {\n    state.historySize = Math.max(state.historySize, getSequenceSize(code))\n  }\n  return state\n}\n","import {normalizeKey} from './key'\nimport {aliases, codes, modifiers} from './constants'\nimport {AliasCharacter, Character, EncodedKey, Key, KeyboardEventType, Modifier} from './types'\n\nexport function createEvent(key: Key, type: KeyboardEventType = 'keydown') {\n  const parts = normalizeKey(key) as Array<Character | Modifier>\n  let eventKey = parts.at(-1) as string\n  if (aliases[eventKey as AliasCharacter] !== undefined) eventKey = aliases[eventKey as AliasCharacter]\n  if (eventKey === 'ctrl') eventKey = 'Control'\n  if (eventKey === 'alt') eventKey = 'Alt'\n  if (eventKey === 'meta') eventKey = 'Meta'\n  if (eventKey === 'shift') eventKey = 'Shift'\n  return new KeyboardEvent(type, {\n    ctrlKey: parts.includes('ctrl'),\n    altKey: parts.includes('alt'),\n    metaKey: parts.includes('meta'),\n    shiftKey: parts.includes('shift'),\n    key: eventKey,\n  })\n}\n\nexport function encodeEvent(event: KeyboardEvent): EncodedKey {\n  let code = codes[event.key.toLowerCase()] || 0\n  for (const modifier of modifiers) {\n    code = 2 * code + (event[`${modifier}Key` as keyof KeyboardEvent] ? 1 : 0)\n  }\n  return code\n}\n","import {aliases, ALT_MASK, chars, codes, CTRL_MASK, META_MASK, modifiers, MODIFIERS_SIZE, MODIFIERS_UPPER_BOUND, SHIFT_MASK} from './constants'\nimport {EncodedKey, Key, NormalizedKey} from './types'\n\nexport function normalizeKey(key: Key): NormalizedKey {\n  let parts: string[]\n  if (key === '+') return ['+']\n  if ('+' == key.slice(-1)) {\n    parts = key.slice(0, -2).split('+')\n    parts.push('+')\n  } else {\n    parts = key.split('+')\n  }\n  return parts.map((x) => (aliases as any)[x] || x) as NormalizedKey\n}\n\nexport function encodeKey(key: NormalizedKey): EncodedKey {\n  const parts = new Set(key)\n  let code = codes[key[key.length - 1].toLowerCase()] || 0\n  for (const modifier of modifiers) {\n    code = 2 * code + (parts.has(modifier) ? 1 : 0)\n  }\n  return code\n}\n\nexport function decodeKey(encodedKey: EncodedKey): NormalizedKey {\n  const charCode = getCharacterCode(encodedKey)\n  const modifiersCode = getModifiersCode(encodedKey)\n  const key = []\n  if (modifiersCode & CTRL_MASK) key.push('ctrl')\n  if (modifiersCode & ALT_MASK) key.push('alt')\n  if (modifiersCode & META_MASK) key.push('meta')\n  if (modifiersCode & SHIFT_MASK) key.push('shift')\n  const c = chars[charCode]\n  if (c) key.push(c)\n  return key as any\n}\n\nexport function getCharacterCode(encodedKey: EncodedKey) {\n  return encodedKey >> MODIFIERS_SIZE\n}\n\nexport function getModifiersCode(encodedKey: EncodedKey) {\n  return encodedKey % MODIFIERS_UPPER_BOUND\n}\n\nexport function shouldOverride(previousKey: EncodedKey | undefined, newKey: EncodedKey) {\n  if (previousKey === undefined) return false\n  if (getCharacterCode(previousKey) > 0) return false\n  const previousModifiers = getModifiersCode(previousKey)\n  const newModifiers = getModifiersCode(newKey)\n  if (previousModifiers === newModifiers && getCharacterCode(newKey) === 0) return false\n  return (previousModifiers & getModifiersCode(newKey)) === previousModifiers\n}\n","import {AliasCharacter, Character} from './types'\n\nexport const modifiers = ['ctrl', 'alt', 'meta', 'shift'] as const\n\nexport const chars =\n  '__0_1_2_3_4_5_6_7_8_9_a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_ _`_\\'_\"_~_!_@_#_$_%_^_&_*_(_)_._-_+_=_[_]_{_}_<_>_,_/_?_;_:_\\\\_|_capslock_numlock_enter_tab_arrowdown_arrowleft_arrowright_arrowup_end_home_pagedown_pageup_backspace_delete_insert_escape_f1_f2_f3_f4_f5_f6_f7_f8_f9_f10_f11_f12_f13_f14_f15_f16_f17_f18_f19_f20_f21_f22_f23'.split(\n    '_'\n  )\nchars[1] = '_'\n\nexport const codes: Record<string, number> = {}\nfor (const [i, c] of chars.entries()) codes[c] = i\n\nexport const aliases: Record<AliasCharacter, Character> = {\n  space: ' ',\n  plus: '+',\n  up: 'arrowup',\n  down: 'arrowdown',\n  left: 'arrowleft',\n  right: 'arrowright',\n  esc: 'escape',\n}\n\n/**\nWe want to encode keys and sequences of keys as numbers for performance\nA key code is 13 bits: XXXXXXXXXCAMS\n  XXXXXXXXX: 9 bits representing the character (event.key value).\n    A character can't have a code `0`, that's a special value.\n    We can have at most 511 different characters!\n  CAMS: 4 bits representing the modifiers `Ctrl`, `Alt`, `Meta` and `Shift` in this order.\nA sequence of keys is represented by the concatenation of codes of the keys.\n  An integer can safely be represented with 53 bits in Javascript `Number.MAX_SAFE_INTEGER`\n  Since every key takes 13bits, a sequence can at most contain 4 keys = 52 bits!\n*/\n\nexport const MODIFIERS_SIZE = 4\nexport const CHARACTER_SIZE = 9\nexport const CTRL_MASK = 0b1000\nexport const ALT_MASK = 0b0100\nexport const META_MASK = 0b0010\nexport const SHIFT_MASK = 0b0001\nexport const KEY_SIZE = CHARACTER_SIZE + MODIFIERS_SIZE\nexport const MODIFIERS_UPPER_BOUND = 2 ** MODIFIERS_SIZE\nexport const ONE_KEY_UPPER_BOUND = 2 ** KEY_SIZE\nexport const TWO_KEYS_UPPER_BOUND = 2 ** (2 * KEY_SIZE)\nexport const THREE_KEYS_UPPER_BOUND = 2 ** (3 * KEY_SIZE)\n","import {ONE_KEY_UPPER_BOUND, THREE_KEYS_UPPER_BOUND, TWO_KEYS_UPPER_BOUND} from './constants'\nimport {decodeKey, encodeKey, normalizeKey} from './key'\nimport {EncodedKey, EncodedSequence, NormalizedSequence, Sequence} from './types'\n\nexport function normalizeSequence(sequence: Sequence): NormalizedSequence {\n  return sequence.map(normalizeKey)\n}\n\nexport function encodeSequence(sequence: NormalizedSequence): EncodedSequence {\n  if (sequence.length > 4) throw `Can't encode sequence of more than 4 keys!`\n  let code = 0\n  for (const key of sequence) {\n    code = code * ONE_KEY_UPPER_BOUND + encodeKey(key)\n  }\n  return code\n}\n\nexport function decodeSequence(sequence: EncodedSequence): NormalizedSequence {\n  const keys = []\n  while (sequence > 0) {\n    keys.unshift(decodeKey(sequence % 2 ** 13))\n    sequence = sequence >> 13\n  }\n  return keys\n}\n\nexport function getSequenceSize(seq: EncodedSequence) {\n  if (seq < ONE_KEY_UPPER_BOUND) return 1\n  if (seq < TWO_KEYS_UPPER_BOUND) return 2\n  if (seq < THREE_KEYS_UPPER_BOUND) return 3\n  return 4\n}\n\n/*\ngetEncodedSequencesFromHistory([\n  keyCode('ctrl+a'), \n  keyCode('alt+b'),\n  keyCode('c')\n]) //=> [\n  seqCode(['c'])\n  seqCode(['alt+b', 'c'])\n  seqCode(['ctrl+a', 'alt+b', 'c'])\n]\n*/\nexport function getEncodedSequencesFromHistory(keys: EncodedKey[]) {\n  const result = []\n  let sequenceCode = 0\n  let multiplier = 0\n  for (let i = keys.length - 1; i >= 0; i--) {\n    sequenceCode = 2 ** multiplier * keys[i] + sequenceCode\n    multiplier = multiplier + 13\n    result.push(sequenceCode)\n  }\n  return result\n}\n","import {tuple} from 'just-types'\n\ntype Modifiers = ['ctrl', 'alt', 'meta', 'shift']\nexport type Modifier = Modifiers[number]\nexport type AliasCharacter = 'space' | 'plus' | 'up' | 'down' | 'left' | 'right' | 'esc'\n\nexport type Key = tuple.Join<NormalizedKey<Character | AliasCharacter>, '+'>\nexport type NormalizedKey<C extends string = Character> = tuple.SubArray<tuple.Permutation<Modifiers>> | [...tuple.SubArray<tuple.Permutation<Modifiers>>, C]\nexport type EncodedKey = number\n\nexport type Sequence = Key[]\nexport type NormalizedSequence = NormalizedKey[]\nexport type EncodedSequence = number\n\nexport type KeyboardEventType = 'keydown' | 'keyup'\nexport type Callback = (event?: KeyboardEvent) => any\nexport type KeyboardEventListener = (event: KeyboardEvent) => any\nexport type State = {\n  history: EncodedKey[]\n  historySize: number\n  disabledSequenceCodes: Set<EncodedSequence>\n  bindings: Map<EncodedSequence, Set<Callback>>\n}\n\nexport type Binding = [Key, Callback] | [Key, Key, Callback] | [Key, Key, Key, Callback] | [Key, Key, Key, Key, Callback]\nexport interface HandlerInterface {\n  add(...args: Binding): this\n  remove(...args: Binding): this\n  enable(...keys: Sequence): this\n  disable(...keys: Sequence): this\n  handle(event: KeyboardEvent): boolean\n}\n\nexport type Character =\n  | '_'\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'g'\n  | 'h'\n  | 'i'\n  | 'j'\n  | 'k'\n  | 'l'\n  | 'm'\n  | 'n'\n  | 'o'\n  | 'p'\n  | 'q'\n  | 'r'\n  | 's'\n  | 't'\n  | 'u'\n  | 'v'\n  | 'w'\n  | 'x'\n  | 'y'\n  | 'z'\n  | ' '\n  | '`'\n  | \"'\"\n  | '\"'\n  | '~'\n  | '!'\n  | '@'\n  | '#'\n  | '$'\n  | '%'\n  | '^'\n  | '&'\n  | '*'\n  | '('\n  | ')'\n  | '.'\n  | '-'\n  | '+'\n  | '='\n  | '['\n  | ']'\n  | '{'\n  | '}'\n  | '<'\n  | '>'\n  | ','\n  | '/'\n  | '?'\n  | ';'\n  | ':'\n  | '\\\\'\n  | '|'\n  | 'capslock'\n  | 'numlock'\n  | 'enter'\n  | 'tab'\n  | 'arrowdown'\n  | 'arrowleft'\n  | 'arrowright'\n  | 'arrowup'\n  | 'end'\n  | 'home'\n  | 'pagedown'\n  | 'pageup'\n  | 'backspace'\n  | 'delete'\n  | 'insert'\n  | 'escape'\n  | 'f1'\n  | 'f2'\n  | 'f3'\n  | 'f4'\n  | 'f5'\n  | 'f6'\n  | 'f7'\n  | 'f8'\n  | 'f9'\n  | 'f10'\n  | 'f11'\n  | 'f12'\n  | 'f13'\n  | 'f14'\n  | 'f15'\n  | 'f16'\n  | 'f17'\n  | 'f18'\n  | 'f19'\n  | 'f20'\n  | 'f21'\n  | 'f22'\n  | 'f23'\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}