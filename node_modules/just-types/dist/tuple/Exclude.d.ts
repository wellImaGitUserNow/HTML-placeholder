type ExcludeOrEmpty<T, U> = Exclude<T, U> extends never ? [] : [Exclude<T, U>];
export type TupleExclude<T extends any[], U> = T extends [infer A, infer B, infer C, ...infer Rest] ? [...ExcludeOrEmpty<A, U>, ...ExcludeOrEmpty<B, U>, ...ExcludeOrEmpty<C, U>, ...TupleExclude<Rest, U>] : T extends [infer A, infer B, ...infer Rest] ? [...ExcludeOrEmpty<A, U>, ...ExcludeOrEmpty<B, U>, ...TupleExclude<Rest, U>] : T extends [infer A, ...infer Rest] ? [...ExcludeOrEmpty<A, U>, ...TupleExclude<Rest, U>] : [
];
export {};
