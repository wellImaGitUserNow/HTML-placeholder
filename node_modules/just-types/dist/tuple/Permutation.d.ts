import { Insert } from './Insert';
import { Range } from '../number';
import { ZeroTo10, ZeroTo100 } from '../constants';
type InsertAnywhere<T extends any[] & {
    length: ZeroTo100;
}, X> = Insert<T, X, Range<0, T['length']>>;
export type Permutation<T extends any[] & {
    length: ZeroTo10;
}> = T extends [infer A, infer B, infer C, ...infer Rest] ? InsertAnywhere<InsertAnywhere<InsertAnywhere<Permutation<Rest>, A>, B>, C> : T extends [infer A, infer B, ...infer Rest] ? InsertAnywhere<InsertAnywhere<Permutation<Rest>, A>, B> : T extends [infer A, ...infer Rest] ? InsertAnywhere<Permutation<Rest>, A> : [
];
export {};
