type ExtractOrEmpty<T, U> = Extract<T, U> extends never ? [] : [Extract<T, U>];
export type TupleExtract<T extends any[], U> = T extends [infer A, infer B, infer C, ...infer Rest] ? [...ExtractOrEmpty<A, U>, ...ExtractOrEmpty<B, U>, ...ExtractOrEmpty<C, U>, ...TupleExtract<Rest, U>] : T extends [infer A, infer B, ...infer Rest] ? [...ExtractOrEmpty<A, U>, ...ExtractOrEmpty<B, U>, ...TupleExtract<Rest, U>] : T extends [infer A, ...infer Rest] ? [...ExtractOrEmpty<A, U>, ...TupleExtract<Rest, U>] : [
];
export {};
